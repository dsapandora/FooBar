from copy import deepcopy
from itertools import permutations

# I am not happy with this implementation, due to a realization I have recently had:
#   My Bellman-Ford implementation is completely unnecessary. The Floyd algorithm can detect negative cycles, and
#   negative cycles are all I used Bellman-Ford for. Thus, with some refactoring, I could easily make this more
#   efficient.


def powerset(list):
    """
    :param list: The list to generate subsets of.
    :return: A generator that produces all subsets of this set.
    """
    x = len(list)
    masks = [1 << i for i in range(x)]
    for i in range(1 << x):
        yield [ss for mask, ss in zip(masks, list) if i & mask]


def getneighbourindex(neighbour, graphsize):
    if neighbour == "Bulkhead":
        return graphsize - 1
    elif neighbour == "Start":
        return 0
    else:
        return int(neighbour)+1


def matrix2graph(matrix):
    """
    This helper function turns our matrix into a graph that's a little easier to work with using Bellman-Ford.

    :param matrix: The original matrix.
    :return: matrix in dictionary format.
    """
    keys = ["Start"]
    for num in range(1, len(matrix)-1):
        keys.append(num-1)
    keys.append("Bulkhead")
    graph = dict(zip(keys, matrix))
    return graph


# Step 1: Initialize graph
def initialize(graph, source):
    """
    Step 1 of the Bellman-Ford algorithm.
    """
    distance = {}
    predecessor = {}
    for node in graph:
        # We start off assuming all nodes are too far away!
        distance[node] = 1000
        predecessor[node] = None
    distance[source] = 0 # For the source we know how to reach
    return distance, predecessor


def relax(node, neighbour, graph, distance, predecessor):
    nidx = getneighbourindex(neighbour, len(graph))
    if distance[node] + graph[node][nidx] < distance[neighbour]:
        distance[neighbour] = distance[node] + graph[node][nidx]
        predecessor[neighbour] = node


def bellman_ford(matrix, graph, time_limit, source):
    dist, pred = initialize(graph, source)
    for num in range(len(graph)-1):
        for node in graph:
            temp = dict(graph)
            del temp[node]
            for neighbour in temp:
                # Step 2: Relax edges repeatedly
                relax(node, neighbour, graph, dist, pred)

    # Step 3: Check for negative-weight cycles
    for node in graph:
        for neighbour in graph:
            nidx = getneighbourindex(neighbour, len(graph))
            if dist[node] + graph[node][nidx] < dist[neighbour]:
                # We found a negative cycle. Since the door is open forever, free all the bunnies!~
                return [num for num in range(0, len(graph)-2)]

    # If we reach this point, it's time to employ floyd and also enumerate path lengths.
    spaths = floyd(matrix)
    # Uncomment the below code to see the floyd algorithm printed in a nice format.
    # for i in range(len(spaths)):
    #     print(spaths[i])
    return find_most_bunnies(matrix, spaths, time_limit)


def floyd(matrix):
    """
    Floyd's algorithm, straight from a textbook. Floyd's algorithm transforms a weight matrix
    into a matrix of shortest paths, such that the shortest path from node M to node N is
    equal to matrix[m][n]

    :return: An array of shortest-path distance calculations.
    """
    n = len(matrix)
    spaths = deepcopy(matrix)
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if spaths[i][k] + spaths[k][j] < spaths[i][j]:
                    spaths[i][j] = spaths[i][k] + spaths[k][j]
    return spaths


def find_most_bunnies(matrix, spaths, time_limit):
    """
    And now, yet more inefficient bruteforcing to solve our NP-Hard problem. Enumerate all possible subsets,
    and then evaluate all their permutations to find the most efficient path.

    :param matrix: The original weighted matrix we will analyze with our algorithm.
    :param spaths: An array of shortest paths generated by the floyd's algorithm.
    :param time_limit: The time limit each subset is tested against.
    :return: The lexicographically least subset of bunnies that can escape.
    """
    n = len(matrix)-2
    bunnyids = []
    for num in range(n):
        bunnyids.append(num)
    pset = powerset(bunnyids)
    pset = sorted(pset)
    # Now that I've got all our possible subsets, I can calculate the distance of each path and determine which is
    # optimal.
    optimal_bunnies = []
    for sub in pset:
        for permutation in permutations(sub):
            # print(permutation)
            subsum = 0
            prev = 0
            next = len(matrix)-1
            for bunnyid in permutation:
                next = bunnyid+1
                subsum += spaths[prev][next]
                prev = next
            subsum += spaths[prev][len(matrix)-1]
            if subsum <= time_limit and len(sub) > len(optimal_bunnies):
                optimal_bunnies = sub
                if len(optimal_bunnies) == n:
                    break
            else:
                # Either rescue takes too long, or lexicographically lesser solution of same length exists.
                pass
    return optimal_bunnies


def answer(times, time_limit):
    # I was told when I got my degree I would never be asked to solve the Traveling Salesman Problem.
    # I was misinformed, but this was fun!
    if len(times) <= 2:
        return []
    graph = matrix2graph(times)
    return bellman_ford(times, graph, time_limit, "Start")


if __name__ == '__main__':
    case1 = [[0, 1, 1, 1, 1],
             [1, 0, 1, 1, 1],
             [1, 1, 0, 1, 1],
             [1, 1, 1, 0, 1],
             [1, 1, 1, 1, 0]]
    print("\n\nCase 1: Provided test case 1.\nTime limit: 3")
    for row in case1:
        print('', row)
    print("\n  Expected: [0, 1]\nCalculated:", str(answer(case1, 3)))

    print("\n\nCase 2: Provided test case 2.\nTime limit: 1")
    case2 = [[0, 2, 2, 2, -1],
             [9, 0, 2, 2, -1],
             [9, 3, 0, 2, -1],
             [9, 3, 2, 0, -1],
             [9, 3, 2, 2, 0]]
    for row in case2:
        print('', row)
    print("\n  Expected: [1, 2]\nCalculated:", str(answer(case2, 1)))

    print("\n\nCase 3: Infinite negative cycle.\nTime limit: -500")
    case3 = [[0, 2, 2, 2, -1],
             [9, 0, 2, 2, 0],
             [9, 3, 0, 2, 0],
             [9, 3, 2, 0, 0],
             [-1, 3, 2, 2, 0]]
    for row in case3:
        print('', row)
    print("\n  Expected: [0, 1, 2]\nCalculated:", str(answer(case3, -500)))

    print("\n\nCase 4: Max bunnies. None rescuable.\nTime limit: 1")
    case4 = [[1, 1, 1, 1, 1, 1, 1],
             [1, 1, 1, 1, 1, 1, 1],
             [1, 1, 1, 1, 1, 1, 1],
             [1, 1, 1, 1, 1, 1, 1],
             [1, 1, 1, 1, 1, 1, 1],
             [1, 1, 1, 1, 1, 1, 1],
             [1, 1, 1, 1, 1, 1, 1]]
    for row in case4:
        print('', row)
    print("\n  Expected: []\nCalculated:", str(answer(case4, 1)))

    print("\n\nCase 5: One bunny.\nTime limit: 2")
    case5 = [[1, 1, 1],
             [1, 1, 1],
             [1, 1, 1]]
    for row in case5:
        print('', row)
    print("\n  Expected: [0]\nCalculated:", str(answer(case5, 2)))

    print("\n\nCase 6: Multiple revisits.\nTime limit: 10")
    case6 = [[0, 5, 11, 11, 1],
             [10, 0, 1, 5, 1],
             [10, 1, 0, 4, 0],
             [10, 1, 5, 0, 1],
             [10, 10, 10, 10, 0]]
    for row in case6:
        print('', row)
    print("\n  Expected: [0, 1]\nCalculated:", str(answer(case6, 10)))

    print("\n\nCase 7: Multiple Revisits 2.\nTime limit: 5")
    case7 = [[0, 10, 10, 10, 1],
             [0, 0, 10, 10, 10],
             [0, 10, 0, 10, 10],
             [0, 10, 10, 0, 10],
             [1, 1, 1, 1, 0]]
    for row in case7:
        print('', row)
    print("\n  Expected: [0, 1]\nCalculated:", str(answer(case7, 5)))

    print("\n\nCase 8: Time travel.\nTime limit: 1")
    case8 = [[0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0]]
    for row in case8:
        print('', row)
    print("\n  Expected: [0, 1, 2]\nCalculated:", str(answer(case8, 1)))

    print("\n\nCase 9: No bunnies.\nTime limit: 1")
    case9 = [[2, 2],
             [2, 2]]
    for row in case9:
        print('', row)
    print("\n  Expected: []\nCalculated:", str(answer(case9, 1)))

    print("\n\nCase 10: Backwards bunny path.\nTime limit: 6")
    case10 = [[0, 10, 10, 1, 10],
              [10, 0, 10, 10, 1],
              [10, 1, 0, 10, 10],
              [10, 10, 1, 0, 10],
              [1, 10, 10, 10, 0]]
    for row in case10:
        print('', row)
    print("\n  Expected: [0, 1, 2]\nCalculated:", str(answer(case10, 6)))